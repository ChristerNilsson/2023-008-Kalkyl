// Generated by CoffeeScript 2.5.1
var ANGLE_MODE, DISPLAY_MODE, KEY, LANGUAGE, assert, config, decode, encode, findLineNo, makeAnswer, memory, page, setup, solve_bin, solve_nr,
  indexOf = [].indexOf;

KEY = '008B';

ANGLE_MODE = ['Degrees', 'Radians'];

LANGUAGE = ['Coffeescript', 'Javascript'];

DISPLAY_MODE = ['Fixed', 'Engineering'];

memory = null;

page = null;

config = {
  angleMode: 0,
  language: 1,
  displayMode: 0,
  digits: 3
};

assert = (a, b, msg = '') => {
  chai.assert.deepEqual(a, b, msg);
  return 'ok';
};

solve_bin = (f, a, b, n = 20) => {
  var i, j, len, ref, x;
  ref = range(n);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    x = (a + b) / 2;
    if (f(x) === 0) {
      return x;
    }
    if (f(a) * f(x) < 0) {
      b = x;
    } else {
      a = x;
    }
  }
  return [a, b];
};

solve_nr = (f, x = 0, n = 10, h = 0.001) => {
  var fprim, i, j, len, ref;
  fprim = (x) => {
    return (f(x + h) - f(x - h)) / (2 * h);
  };
  ref = range(n);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    x -= f(x) / fprim(x);
  }
  return x;
};

findLineNo = (e) => {
  var j, len, line, lines;
  lines = e.stack.split('\n');
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    if (0 <= line.indexOf('<anonymous>')) {
      return line.split(':')[1] - 1;
    }
  }
  return 0;
};

makeAnswer = function() {
  var JS, answer, answers, cs, e, j, js, k, len, len1, line, lineNo, lines, pos, post, pre, res, stack;
  answers = [];
  res = '';
  cs = '';
  js = [];
  JS = config.language === 0 ? '' : '`';
  angleMode([DEGREES, RADIANS][config.angleMode]);
  lines = memory.split("\n");
  for (j = 0, len = lines.length; j < len; j++) {
    line = lines[j];
    pos = line.lastIndexOf(config.language === 0 ? '#' : '//');
    if (pos >= 0) {
      line = line.slice(0, pos);
    }
    cs = line.trim();
    if (cs === '') {
      js.push(transpile(JS + 'answers.push("")' + JS));
    } else {
      try {
        if (cs[cs.length - 1] === '=') {
          cs += 'undefined';
        }
        js.push(transpile(JS + 'answers.push(' + cs + ")" + JS));
      } catch (error) {
        e = error;
        stack = e.stack.split('\n');
        js.push(transpile(JS + "answers.push('" + stack[0] + "')" + JS));
      }
    }
  }
  try {
    console.dir(js);
    eval(js.join("\n"));
  } catch (error) {
    e = error;
    console.dir(e.stack);
    lineNo = findLineNo(e);
    pre = (range(lineNo).map((x) => {
      return '\n';
    })).join('');
    post = (range(js.length - lineNo).map((x) => {
      return '\n';
    })).join('');
    lines = e.stack.split('\n');
    return pre + lines[0] + post;
  }
  res = "";
  for (k = 0, len1 = answers.length; k < len1; k++) {
    answer = answers[k];
    if ('function' === typeof answer) {
      res += 'function defined' + "\n";
    } else if ('object' === typeof answer) {
      res += JSON.stringify(answer) + "\n";
    } else if ('number' === typeof answer) {
      if (config.displayMode === 0) {
        res += fixed(answer, config.digits) + "\n";
      }
      if (config.displayMode === 1) {
        res += engineering(answer, config.digits) + "\n";
      }
    } else {
      res += answer + "\n";
    }
  }
  return res;
};

encode = function() {
  var s;
  s = encodeURI(memory);
  s = s.replace(/=/g, '%3D');
  s = s.replace(/\?/g, '%3F');
  s = s.replace(/#/g, '%23');
  return window.open('?content=' + s + '&config=' + encodeURI(JSON.stringify(config)));
};

decode = function() {
  var parameters;
  memory = '';
  if (indexOf.call(window.location.href, '?') >= 0) {
    parameters = getParameters();
    if (parameters.content) {
      memory = decodeURI(parameters.content);
      memory = memory.replace(/%3D/g, '=');
      memory = memory.replace(/%3F/g, '?');
      memory = memory.replace(/%23/g, '#');
    }
    if (parameters.config) {
      return config = JSON.parse(decodeURI(parameters.config));
    }
  }
};

setup = function() {
  // memory = fetchData()
  decode();
  page = new Page(0, function() {
    var answer, enter;
    this.table.innerHTML = "";
    enter = makeTextArea();
    enter.style.left = '51%';
    enter.style.width = '48%';
    //enter.style.overflow = 'hidden'
    enter.focus();
    enter.value = memory;
    answer = makeTextArea();
    answer.style.left = '0px';
    answer.setAttribute("readonly", true);
    answer.style.textAlign = 'right';
    answer.style.overflow = 'hidden';
    answer.wrap = 'off';
    answer.value = makeAnswer();
    enter.onscroll = function(e) {
      answer.scrollTop = enter.scrollTop;
      return answer.scrollLeft = enter.scrollLeft;
    };
    answer.onscroll = function(e) {
      return e.preventDefault();
    };
    this.addRow(enter, answer);
    return enter.addEventListener("keyup", function(event) {
      var ref;
      answer.scrollTop = enter.scrollTop;
      answer.scrollLeft = enter.scrollLeft;
      if (ref = event.keyCode, indexOf.call([33, 34, 35, 36, 37, 38, 39, 40], ref) < 0) {
        memory = enter.value;
        return answer.value = makeAnswer();
      }
    });
  });
  // storeData memory
  page.addAction('Clear', function() {
    memory = "";
    return storeAndGoto(memory, page);
  });
  page.addAction('Samples', function() {
    if (config.language === 0) {
      memory = `# Coffeescript
2+3

sträcka = 150
tid = 6
tid
sträcka/tid
25 == sträcka/tid 
30 == sträcka/tid

# String
a = "Volvo" 
5 == a.length
'l' == a[2]

# Math
5 == sqrt 25 

# Date
c = new Date() 
c.getFullYear()
c.getHours()

# Array
numbers = [1,2,3] 
2 == numbers[1]
numbers.push 47
4 == numbers.length
numbers 
47 == numbers.pop()
3 == numbers.length
numbers
assert [0,1,4,9,16,25,36,49,64,81], (x*x for x in range 10)

# Object
person = {fnamn:'David', enamn:'Larsson'}
'David' == person['fnamn']
'Larsson' == person.enamn

# functions (enbart one liners tillåtna!)
kvadrat = (x) -> x*x
25 == kvadrat 5

# feluppskattning vid användande av bäring och avstånd
area = (b1,b2,r1,r2) -> (r2*r2 - r1*r1) * Math.PI * (b2-b1)/360  
17.671458676442587 == area 90,91,200,205
35.12475119638588  == area 90,91,400,405
69.81317007977317  == area 90,92,195,205
139.62634015954634 == area 90,92,395,405

serial = (a,b) -> a+b
2 == serial 1,1
5 == serial 2,3

parallel = (a,b) -> a*b/(a+b)
0.5 == parallel 1,1
1.2 == parallel 2,3

fak = (x) -> if x==0 then 1 else x * fak(x-1)
3628800 == fak 10

fib = (x) -> if x<=0 then 1 else fib(x-1) + fib(x-2) 
1 == fib 0
2 == fib 1
5 == fib 3
8 == fib 4
13 == fib 5
21 == fib 6

f = (x) => 9**x - 6**x - 4**x
solve_bin f,0,2,50
solve_nr f,1
`; // Javascript
    } else {
      memory = `// Javascript
2+3

distance = 150
seconds = 6
seconds
distance/seconds
25 == distance/seconds
30 == distance/seconds

// String
a = "Volvo" 
5 == a.length
'l' == a[2]

// Math
5 == sqrt(25)

// Date
c = new Date() 
c.getFullYear()
c.getHours()

// Array
numbers = [1,2,3] 
2 == numbers[1]
numbers.push(47)
4 == numbers.length
numbers 
47 == numbers.pop()
3 == numbers.length
numbers
assert([0,1,4,9,16,25,36,49,64,81], range(10).map(x => x*x))

// Object
person = {fnamn:'David', enamn:'Larsson'}
'David' == person['fnamn']
'Larsson' == person.enamn

// functions (only one liners)
kvadrat = (x) => x*x
25 == kvadrat(5)

serial = (a,b) => a+b
2 == serial(1,1)
5 == serial(2,3)

parallel = (a,b) => a*b/(a+b)
0.5 == parallel(1,1)
1.2 == parallel(2,3)

fak = (x) => (x==0 ? 1 : x * fak(x-1))
3628800 == fak(10)

fib = (x) => x<=0 ? 1 : fib(x-1) + fib(x-2)
1 == fib(0)
2 == fib(1)
5 == fib(3)
8 == fib(4)
13 == fib(5)
21 == fib(6)

f = (x) => 9**x - 6**x - 4**x

solve_bin(f,0,2,50)
solve_nr(f,1)
`;
    }
    // storeAndGoto memory,page
    return encode();
  });
  page.addAction('Help', function() {
    return window.open("https://github.com/ChristerNilsson/2023-008-Kalkyl#008-kalkyl");
  });
  page.addAction('Hide', function() {
    return page.display();
  });
  page.addAction('URL', function() {
    return encode();
  });
  page.addAction(ANGLE_MODE[config.angleMode], function() {
    config.angleMode = 1 - config.angleMode;
    page.actions[5][0] = ANGLE_MODE[config.angleMode];
    makeAnswer();
    return storeAndGoto(memory, page);
  });
  page.addAction(LANGUAGE[config.language], function() {
    config.language = 1 - config.language;
    page.actions[6][0] = LANGUAGE[config.language];
    return storeAndGoto(memory, page);
  });
  page.addAction(DISPLAY_MODE[config.displayMode], function() {
    config.displayMode = 1 - config.displayMode;
    page.actions[7][0] = DISPLAY_MODE[config.displayMode];
    return storeAndGoto(memory, page);
  });
  page.addAction('Less', function() {
    if (config.digits > 1) {
      config.digits--;
    }
    return storeAndGoto(memory, page);
  });
  page.addAction('More', function() {
    if (config.digits < 17) {
      config.digits++;
    }
    return storeAndGoto(memory, page);
  });
  return page.display();
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2023-008-Kalkyl\coffee\sketch.coffee